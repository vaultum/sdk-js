/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/op/submit": {
    /**
     * Submit a UserOperation
     * @description Submit a signed UserOperation to the bundler
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SubmitRequest"];
        };
      };
      responses: {
        /** @description Operation accepted */
        201: {
          content: {
            "application/json": components["schemas"]["SubmitResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/api/op/{id}": {
    /**
     * Get operation status
     * @description Check the status of a submitted operation
     */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Operation found */
        200: {
          content: {
            "application/json": components["schemas"]["OperationStatus"];
          };
        };
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/api/op/{id}/wait": {
    /**
     * Wait for operation completion
     * @description Long-poll endpoint that waits for operation to complete
     */
    get: {
      parameters: {
        query?: {
          timeout?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Operation completed or timeout */
        200: {
          content: {
            "application/json": components["schemas"]["OperationStatus"];
          };
        };
      };
    };
  };
  "/api/account/deploy": {
    /**
     * Deploy a new smart account
     * @description Deploy a new smart account with initial modules
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["DeployRequest"];
        };
      };
      responses: {
        /** @description Account deployed */
        201: {
          content: {
            "application/json": components["schemas"]["DeployResponse"];
          };
        };
      };
    };
  };
  "/api/recovery/initiate": {
    /**
     * Initiate social recovery
     * @description Guardian initiates recovery process
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RecoveryRequest"];
        };
      };
      responses: {
        /** @description Recovery initiated */
        201: {
          content: {
            "application/json": components["schemas"]["RecoveryResponse"];
          };
        };
      };
    };
  };
  "/api/recovery/{account}/status": {
    /**
     * Get recovery status
     * @description Check if account has pending recovery
     */
    get: {
      parameters: {
        path: {
          account: string;
        };
      };
      responses: {
        /** @description Recovery status */
        200: {
          content: {
            "application/json": components["schemas"]["RecoveryStatus"];
          };
        };
      };
    };
  };
  "/api/recovery/support": {
    /**
     * Support active recovery
     * @description Guardian approves an active recovery request
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RecoverySupportRequest"];
        };
      };
      responses: {
        /** @description Recovery supported */
        200: {
          content: {
            "application/json": components["schemas"]["RecoveryResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/recovery/execute": {
    /**
     * Execute recovery
     * @description Execute recovery after timelock and threshold
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RecoveryExecuteRequest"];
        };
      };
      responses: {
        /** @description Recovery executed */
        200: {
          content: {
            "application/json": components["schemas"]["RecoveryResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/recovery/cancel": {
    /**
     * Cancel recovery
     * @description Account owner cancels active recovery
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RecoveryCancelRequest"];
        };
      };
      responses: {
        /** @description Recovery cancelled */
        200: {
          content: {
            "application/json": components["schemas"]["RecoveryResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/sessionkey/grant": {
    /**
     * Grant session key
     * @description Grant a new session key with expiry and selectors
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionKeyGrantRequest"];
        };
      };
      responses: {
        /** @description Session key granted */
        201: {
          content: {
            "application/json": components["schemas"]["SessionKeyResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/sessionkey/revoke": {
    /**
     * Revoke session key
     * @description Revoke an existing session key
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionKeyRevokeRequest"];
        };
      };
      responses: {
        /** @description Session key revoked */
        200: {
          content: {
            "application/json": components["schemas"]["SessionKeyResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/sessionkey/selector": {
    /**
     * Update session key selectors
     * @description Add or remove allowed selectors for a session key
     */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionKeySelectorRequest"];
        };
      };
      responses: {
        /** @description Selectors updated */
        200: {
          content: {
            "application/json": components["schemas"]["SessionKeyResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/limits/set": {
    /**
     * Set spending limit
     * @description Set spending limit for a token
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SpendingLimitRequest"];
        };
      };
      responses: {
        /** @description Limit set */
        200: {
          content: {
            "application/json": components["schemas"]["SpendingLimitResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/limits/bypass": {
    /**
     * Toggle owner bypass
     * @description Enable or disable owner bypass for spending limits
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BypassToggleRequest"];
        };
      };
      responses: {
        /** @description Bypass toggled */
        200: {
          content: {
            "application/json": components["schemas"]["BypassStatusResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/api/limits/{account}/status": {
    /**
     * Get spending limits
     * @description Get all spending limits for an account
     */
    get: {
      parameters: {
        path: {
          account: string;
        };
      };
      responses: {
        /** @description Spending limits */
        200: {
          content: {
            "application/json": components["schemas"]["SpendingLimitsStatus"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SubmitRequest: {
      /** @enum {string} */
      chain: "ethereum" | "arbitrum" | "optimism" | "polygon" | "base" | "sepolia";
      userOp: components["schemas"]["UserOperation"];
    };
    UserOperation: {
      sender: string;
      nonce: string;
      initCode: string;
      callData: string;
      callGasLimit: string;
      verificationGasLimit: string;
      preVerificationGas: string;
      maxFeePerGas: string;
      maxPriorityFeePerGas: string;
      paymasterAndData: string;
      signature: string;
    };
    SubmitResponse: {
      /** @example op_1234567890abcdef */
      id: string;
      state: components["schemas"]["OperationState"];
    };
    OperationStatus: {
      id: string;
      state: components["schemas"]["OperationState"];
      chain: string;
      userOp: components["schemas"]["UserOperation"];
      txHash?: string | null;
      error?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** @enum {string} */
    OperationState: "queued" | "sent" | "success" | "failed";
    DeployRequest: {
      owner: string;
      chain: string;
      salt?: string;
      modules?: ("socialRecovery" | "sessionKeys" | "spendingLimits")[];
    };
    DeployResponse: {
      account: string;
      txHash: string;
      modules?: {
          name?: string;
          address?: string;
        }[];
    };
    RecoveryRequest: {
      account: string;
      newOwner: string;
      guardian: string;
      signature: string;
    };
    RecoveryResponse: {
      nonce: number;
      approvals: number;
      threshold: number;
      /** Format: date-time */
      timelock: string;
    };
    RecoveryStatus: {
      active: boolean;
      newOwner?: string | null;
      approvals?: number;
      threshold?: number;
      /** Format: date-time */
      timelock?: string | null;
      executable: boolean;
    };
    RecoverySupportRequest: {
      account: string;
      guardian: string;
    };
    RecoveryExecuteRequest: {
      account: string;
    };
    RecoveryCancelRequest: {
      account: string;
      owner: string;
    };
    SessionKeyGrantRequest: {
      account: string;
      sessionKey: string;
      /** @description Unix timestamp when key expires */
      expiry: number;
      allowedSelectors?: string[];
    };
    SessionKeyResponse: {
      success: boolean;
      sessionKey: string;
      expiry?: number | null;
      allowedSelectors?: string[];
    };
    SessionKeyRevokeRequest: {
      account: string;
      sessionKey: string;
    };
    SessionKeySelectorRequest: {
      account: string;
      sessionKey: string;
      /** @enum {string} */
      action: "add" | "remove";
      selectors: string[];
    };
    SpendingLimitRequest: {
      account: string;
      /** @description Token address (0x0 for ETH) */
      token: string;
      /** @description Spending cap in wei */
      cap: string;
      /** @description Time window in seconds (e.g. 86400 for 24h) */
      windowSeconds: number;
    };
    SpendingLimitResponse: {
      success: boolean;
      token: string;
      cap: string;
      windowStart?: number;
      spentInWindow?: string;
    };
    BypassToggleRequest: {
      account: string;
      enable: boolean;
      /** @description Duration in seconds (max 86400 for 24h) */
      duration?: number;
    };
    BypassStatusResponse: {
      enabled: boolean;
      active: boolean;
      /** @description Unix timestamp when bypass expires */
      expiresAt?: number | null;
    };
    SpendingLimitsStatus: {
      limits: {
          token?: string;
          cap?: string;
          windowStart?: number;
          spentInWindow?: string;
        }[];
      bypassStatus: components["schemas"]["BypassStatusResponse"];
    };
  };
  responses: {
    /** @description Invalid request */
    BadRequest: {
      content: {
        "application/json": {
          error?: string;
          details?: Record<string, never>;
        };
      };
    };
    /** @description Resource not found */
    NotFound: {
      content: {
        "application/json": {
          /** @example Operation not found */
          error?: string;
        };
      };
    };
    /** @description Server error */
    ServerError: {
      content: {
        "application/json": {
          error?: string;
          message?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
